using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Mi08 : MonoBehaviour {
    public class public08 {
        //公開 可被繼承     
        //屬性(變數)
        //行為(方法/函數/method)
    }

    abstract class abstract08 {
        //抽象類別 一般用作基礎類別，需被衍生繼承
        //屬性(變數)
        //行為(方法/函數/method)
    }

    sealed class sealed08 {
        //密封類別 防止衍生繼承，亦防覆蓋此方法
        //屬性(變數)
        //行為(方法/函數/method)
    }
}

/*
> 封裝性
- 類別總要被實體化，而實體化出來的東西，我們稱之為物件

> 繼承性
- 繼承是物件導向軟體技術當中的一個概念
- 如果A繼承B，A稱為B的衍生類，B稱為A的基礎類
- 繼承可以使得衍生類具有基礎類別的各種屬性和方法，而不需要再次編寫相同的程式碼，可省點記憶體
- 衍生類別繼承基礎類別的同時，可以重新定義某些屬性，並重寫某些方法，即覆蓋基礎類別的原有屬性和方法，使其獲得與基礎類別不同的功能。另外為衍生類別錐加新的屬性和方法也是常見的作法。

> 多型性
- 同一操作作用不同的物件，可以有不同的解釋，產生不同的執行結果，這就是多型性。
- 實際上就是同一個類別的物件呼叫"相同"的當法，但是產生的結果是不同的。
*/